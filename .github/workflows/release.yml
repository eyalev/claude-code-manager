name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: claude-code-manager
            asset_name: claude-code-manager-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: claude-code-manager
            asset_name: claude-code-manager-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: claude-code-manager
            asset_name: claude-code-manager-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }}
        
    - name: Prepare binary
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
        chmod +x ${{ matrix.asset_name }}

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Move binaries
      run: |
        mkdir binaries
        find artifacts -name 'claude-code-manager-*' -type f -exec cp {} binaries/ \;
        ls -la binaries/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: binaries/*
        generate_release_notes: true
        body: |
          ## Installation
          
          Download the appropriate binary for your platform:
          
          ### Linux (x86_64)
          ```bash
          curl -L https://github.com/eyalev/claude-code-manager/releases/latest/download/claude-code-manager-linux-x86_64 -o ~/.local/bin/claude-code-manager
          chmod +x ~/.local/bin/claude-code-manager
          ```
          
          ### macOS (Intel)
          ```bash
          curl -L https://github.com/eyalev/claude-code-manager/releases/latest/download/claude-code-manager-macos-x86_64 -o ~/.local/bin/claude-code-manager
          chmod +x ~/.local/bin/claude-code-manager
          ```
          
          ### macOS (Apple Silicon)
          ```bash
          curl -L https://github.com/eyalev/claude-code-manager/releases/latest/download/claude-code-manager-macos-aarch64 -o ~/.local/bin/claude-code-manager
          chmod +x ~/.local/bin/claude-code-manager
          ```
          
          ## Prerequisites
          
          - tmux (required for session management)
          - claude-code (must be installed and accessible in PATH)
          
          ## Quick Start
          
          ```bash
          # Start a session and wait for completion
          claude-code-manager start --message "Create a hello world Python script" --wait
          
          # List active sessions
          claude-code-manager list
          
          # Get help
          claude-code-manager --help
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}